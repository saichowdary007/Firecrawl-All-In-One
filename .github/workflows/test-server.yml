name: Server Test Suite

on:
  pull_request:
    branches:
      - main

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Audit NPM Packages
        run: |
          pnpm dlx audit-ci@^7 --directory apps/api --config apps/api/audit-ci.jsonc
          pnpm dlx audit-ci@^7 --directory apps/playwright-service-ts --config apps/playwright-service-ts/audit-ci.jsonc
  build-images:
    name: Build images
    runs-on: big-runner
    needs: audit
    steps:
      - uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build API image
        run: |
          docker buildx build \
            -t firecrawl/firecrawl:latest \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --load \
            ./apps/api
      - name: Build Playwright image
        run: |
          docker buildx build \
            -t firecrawl/playwright-service:latest \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --load \
            ./apps/playwright-service-ts
  test:
    name: Self-hosted environment tests
    strategy:
      matrix:
        ai: ["openai", "no-ai"]
        search: ["searxng", "google"]
        engine: ["playwright", "fetch"]
        # proxy: ["proxy", "no-proxy"]
        proxy: ["proxy"]
      fail-fast: false
    runs-on: big-runner
    needs: audit
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    env:
      OPENAI_API_KEY: ${{ matrix.ai == 'openai' && secrets.OPENAI_API_KEY || '' }}
      SEARXNG_ENDPOINT: ${{ matrix.search == 'searxng' && 'http://localhost:3434' || '' }}
      PLAYWRIGHT_MICROSERVICE_URL: ${{ matrix.engine == 'playwright' && 'http://localhost:3003/scrape' || '' }}
      PROXY_SERVER: ${{ matrix.proxy == 'proxy' && secrets.PROXY_SERVER || '' }}
      PROXY_USERNAME: ${{ matrix.proxy == 'proxy' && secrets.PROXY_USERNAME || '' }}
      PROXY_PASSWORD: ${{ matrix.proxy == 'proxy' && secrets.PROXY_PASSWORD || '' }}
      NUQ_DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      TEST_SUITE_SELF_HOSTED: true
      HOST: 0.0.0.0
    steps:
      - uses: actions/checkout@v5
      - name: Run Docker Postgres
        run: |
          docker build -t firecrawl/nuq-postgres:latest ./apps/nuq-postgres
          docker run -d -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=postgres --name postgres firecrawl/nuq-postgres:latest
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: './apps/api/pnpm-lock.yaml'
      - name: Install dependencies
        run: pnpm install
        working-directory: ./apps/api
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install Playwright dependencies
        if: matrix.engine == 'playwright'
        run: |
          pnpm install
          pnpm exec playwright install-deps
          pnpm exec playwright install
        working-directory: ./apps/playwright-service-ts
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache-dependency-path: ./apps/api/sharedLibs/go-html-to-md/go.sum
      - name: Build go-html-to-md
        run: |
          go mod tidy
          go build -o libhtml-to-markdown.so -buildmode=c-shared html-to-markdown.go
          chmod +x libhtml-to-markdown.so
        working-directory: ./apps/api/sharedLibs/go-html-to-md
      - name: Set up SearXNG
        if: matrix.search == 'searxng'
        run: |
          mkdir searxng

          echo "use_default_settings: true
          search:
            formats: [html, json, csv]
          server:
            secret_key: 'fcsecret'" > searxng/settings.yml

          docker run -d -p 3434:8080 -v "${PWD}/searxng:/etc/searxng" --name searxng searxng/searxng
          pnpx wait-on tcp:3434 -t 30s
        working-directory: ./
      - name: Start playwright
        if: matrix.engine == 'playwright'
        run: pnpm run dev > playwright.log 2>&1 &
        working-directory: ./apps/playwright-service-ts
        env:
          PORT: 3003
      - name: Wait for playwright
        if: matrix.engine == 'playwright'
        run: pnpx wait-on tcp:3003 -t 15s
      - name: Start the application and run snippet tests
        run: pnpm harness pnpm test:snips
        working-directory: ./apps/api
      - name: Copy log files
        if: always()
        run: |
          mkdir -p logs
          cp ./apps/api/firecrawl.log logs/firecrawl.log
      - name: Copy SearXNG logs
        if: always() && matrix.search == 'searxng'
        run: docker logs searxng > logs/searxng.log && docker kill searxng
      - name: Copy Playwright logs
        if: always() && matrix.engine == 'playwright'
        run: cp ./apps/playwright-service-ts/playwright.log logs/playwright.log
      - name: Zip logs
        if: always()
        run: |
          cd logs
          zip -r logs.zip ./*
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Logs (kubernetes, ${{ matrix.ai }}, ${{ matrix.search }}, ${{ matrix.engine }}, ${{ matrix.proxy }})
          path: logs/logs.zip
    
  prod-test:
    name: Production environment tests
    runs-on: big-runner
    needs: audit
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    env:
      BULL_AUTH_KEY: ${{ secrets.BULL_AUTH_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      SUPABASE_ANON_TOKEN: ${{ secrets.SUPABASE_ANON_TOKEN }}
      SUPABASE_SERVICE_TOKEN: ${{ secrets.SUPABASE_SERVICE_TOKEN }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_REPLICA_URL: ${{ secrets.SUPABASE_REPLICA_URL }}
      INDEX_SUPABASE_SERVICE_TOKEN: ${{ secrets.INDEX_SUPABASE_SERVICE_TOKEN }}
      INDEX_SUPABASE_ANON_TOKEN: ${{ secrets.INDEX_SUPABASE_ANON_TOKEN }}
      INDEX_SUPABASE_URL: ${{ secrets.INDEX_SUPABASE_URL }}
      TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
      TEST_TEAM_ID: ${{ secrets.TEST_TEAM_ID }}
      TEST_API_KEY_CONCURRENCY: ${{ secrets.TEST_API_KEY_CONCURRENCY }}
      TEST_TEAM_ID_CONCURRENCY: ${{ secrets.TEST_TEAM_ID_CONCURRENCY }}
      TEST_API_KEY_ZDR: ${{ secrets.TEST_API_KEY_ZDR }}
      TEST_TEAM_ID_ZDR: ${{ secrets.TEST_TEAM_ID_ZDR }}
      FIRE_ENGINE_BETA_URL: ${{ secrets.FIRE_ENGINE_BETA_URL }}
      FIRE_ENGINE_STAGING_URL: ${{ secrets.FIRE_ENGINE_STAGING_URL }}
      USE_DB_AUTHENTICATION: true
      SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
      ENV: ${{ secrets.ENV }}
      RUNPOD_MU_POD_ID: ${{ secrets.RUNPOD_MU_POD_ID }}
      RUNPOD_MUV2_POD_ID: ${{ secrets.RUNPOD_MUV2_POD_ID }}
      RUNPOD_MU_API_KEY: ${{ secrets.RUNPOD_MU_API_KEY }}
      GCS_CREDENTIALS: ${{ secrets.GCS_CREDENTIALS }}
      GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      GCS_INDEX_BUCKET_NAME: ${{ secrets.GCS_INDEX_BUCKET_NAME }}
      GCS_MEDIA_BUCKET_NAME: ${{ secrets.GCS_MEDIA_BUCKET_NAME }}
      GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      VERTEX_CREDENTIALS: ${{ secrets.VERTEX_CREDENTIALS }}
      USE_GO_MARKDOWN_PARSER: true
      SENTRY_ENVIRONMENT: dev
      IDMUX_URL: ${{ secrets.IDMUX_URL }}
      LOG_ENCRYPTION_KEY: ${{ secrets.LOG_ENCRYPTION_KEY }}
      NUQ_DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      HOST: 0.0.0.0
    steps:
      - uses: actions/checkout@v5
      - name: Run Docker Postgres
        run: |
          docker build -t firecrawl/nuq-postgres:latest ./apps/nuq-postgres
          docker run -d -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=postgres --name postgres firecrawl/nuq-postgres:latest
      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: 'true'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: './apps/api/pnpm-lock.yaml'
      - name: Install dependencies
        run: pnpm install
        working-directory: ./apps/api
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache-dependency-path: ./apps/api/sharedLibs/go-html-to-md/go.sum
      - name: Build go-html-to-md
        run: |
          go mod tidy
          go build -o libhtml-to-markdown.so -buildmode=c-shared html-to-markdown.go
          chmod +x libhtml-to-markdown.so
        working-directory: ./apps/api/sharedLibs/go-html-to-md
      - name: Build the application and run snippet tests
        run: pnpm harness pnpm test:snips
        working-directory: ./apps/api
      - name: Create logs directory
        if: always()
        run: |
          mkdir -p logs
          cp ./apps/api/firecrawl.log logs/firecrawl.log
          cd logs
          zip -r logs.zip ./*
          echo "${{ secrets.LOG_ENCRYPTION_KEY }}" | gpg --batch --yes --passphrase-fd 0 -c logs.zip
          rm logs.zip
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Encrypted Logs
          path: logs/logs.zip.gpg
          retention-days: 5
